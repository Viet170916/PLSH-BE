# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - build
  - test
  - deploy

variables:
  DOTNET_VERSION: 8.0

build_fe_borrower_project:
  stage: test
  image: node:22.13.0
  cache:
    paths:
      - node_modules/
  before_script:
    - source ~/.profile
    - source ~/.bashrc
    - export PATH="$PATH:~/.nvm/versions/node/v22.13.0/bin"
  script:
    - cd ./plsh-fe-borrower
    - yarn install
    - npm run build
  only:
    - merge_requests
    - client/borrower/develop


build_fe_librarian_project:
  stage: test
  image: node:22.13.0
  cache:
    paths:
      - node_modules/
  before_script:
    - source ~/.profile
    - source ~/.bashrc
    - export PATH="$PATH:~/.nvm/versions/node/v22.13.0/bin"
  script:
    - cd ./plsh-fe-librarian
    - yarn install
    - npm run build
  only:
    - merge_requests
    - client/librarian/develop

# build_be:
#   image: mcr.microsoft.com/dotnet/sdk:8.0
#   stage: build
#   script:
#     - cd ./PLSH-BE
#     - echo "Restoring .NET dependencies"
#     - dotnet restore PLSH-BE.sln
#     - echo "Building the application"
#     - dotnet build PLSH-BE.sln --configuration Release
#     - echo "Publishing the solution"
#     - dotnet publish PLSH-BE.sln --configuration Release --output ./publish
 
#   artifacts:
#     paths:
#       - PLSH-BE/publish
#   only:
#     - merge_requests
#     - server/develop

# test_be:
#   image: mcr.microsoft.com/dotnet/sdk:8.0
#   stage: test
#   script:
#     - cd ./PLSH-BE
#     - echo "Running tests"
#     - dotnet test --configuration Release
#   dependencies:
#     - build_be
#   only:
#     - merge_requests
#     - server/develop

deploy_be:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:8.0
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  script:
    - cd ./PLSH-BE
    - echo "Restoring .NET dependencies"
    - dotnet restore PLSH-BE.sln
    - echo "Building the application"
    - dotnet build PLSH-BE.sln --configuration Release
    - echo "Publishing the solution"
    - dotnet publish PLSH-BE.sln --configuration Release --output ./publish
    - ls
    - echo "Deploying application to server"
    - ./publish ls 
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-54-252-159-167.ap-southeast-2.compute.amazonaws.com \
      "cp -r ./publish/ /var/www/PLBH_App/ && systemctl restart PLBH_App.service"
  environment:
    name: production
  
  only:
    - merge_requests
    - server/develop
